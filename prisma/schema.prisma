// Prisma schema for Orbit application
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    String   @id @default(cuid())
  fid                   String   @unique // Farcaster ID
  walletAddress         String
  timezone              String   @default("America/New_York")
  morningCheckInTime    String   @default("06:00")
  healthSyncEnabled     Boolean  @default(false)
  budgetSyncEnabled     Boolean  @default(false)
  nonNegotiableSlots    Json     @default("[]") // Array of NonNegotiableSlot objects
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  // Relations
  dailySnapshots        DailySnapshot[]
  insights              Insight[]
  tasks                 Task[]
  spendingEvents        SpendingEvent[]
  socialCircles         SocialCircleMember[]
  notificationSchedules NotificationSchedule[]
  circleChallenges      CircleChallengeParticipant[]

  @@map("users")
}

model DailySnapshot {
  id             String   @id @default(cuid())
  userId         String
  date           String   // YYYY-MM-DD
  healthScore    Float    @default(0)
  sleepHours     Float    @default(0)
  steps          Int      @default(0)
  hrv            Float    @default(0)
  budgetStatus   String   @default("on-track") // "under" | "on-track" | "over"
  spendingToday  Float    @default(0)
  topTasks       Json     @default("[]") // Array of task IDs
  streakCount    Int      @default(0)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relations
  user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  insights      Insight[]

  @@unique([userId, date])
  @@map("daily_snapshots")
}

model Insight {
  id               String   @id @default(cuid())
  userId           String
  dailySnapshotId  String?
  type             String   // "health-money" | "health-productivity" | "money-productivity" | "general"
  pattern          String
  confidence       Float    @default(0)
  unlocked         Boolean  @default(false)
  unlockPrice      Int      @default(10) // Price in cents
  unlockTxHash     String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  // Relations
  user            User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  dailySnapshot   DailySnapshot?  @relation(fields: [dailySnapshotId], references: [id], onDelete: SetNull)

  @@map("insights")
}

model Task {
  id                String   @id @default(cuid())
  userId            String
  title             String
  description       String?
  aiPriorityScore   Float    @default(0)
  dueDate           String?
  status            String   @default("pending") // "pending" | "in_progress" | "done" | "deferred"
  category          String   @default("personal") // "work" | "wellness" | "personal" | "health" | "finance"
  estimatedMinutes  Int?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("tasks")
}

model SpendingEvent {
  id             String   @id @default(cuid())
  userId         String
  amount         Float
  category       String
  description    String?
  timestamp      DateTime
  stressContext  String   @default("medium") // "high" | "medium" | "low"
  flagged        Boolean  @default(false)
  merchantName   String?
  transactionId  String?  @unique
  createdAt      DateTime @default(now())

  // Relations
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("spending_events")
}

model SocialCircle {
  id             String   @id @default(cuid())
  name           String
  description    String?
  members        Json     @default("[]") // Array of FIDs
  sharedStreaks  Boolean  @default(true)
  createdBy      String   // FID of creator
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relations
  members_rel    SocialCircleMember[]
  challenges     CircleChallenge[]

  @@map("social_circles")
}

model SocialCircleMember {
  id         String @id @default(cuid())
  circleId   String
  userId     String

  // Relations
  circle     SocialCircle @relation(fields: [circleId], references: [id], onDelete: Cascade)
  user       User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([circleId, userId])
  @@map("social_circle_members")
}

model CircleChallenge {
  id             String   @id @default(cuid())
  circleId       String
  title          String
  description    String?
  type           String   // "spending_limit" | "health_goal" | "task_completion" | "streak_maintenance"
  targetValue    Float
  currentValue   Float    @default(0)
  startDate      String   // ISO date
  endDate        String   // ISO date
  rewardAmount   Float    // $ORBIT tokens
  status         String   @default("active") // "active" | "completed" | "failed"
  createdAt      DateTime @default(now())

  // Relations
  circle         SocialCircle                @relation(fields: [circleId], references: [id], onDelete: Cascade)
  participants   CircleChallengeParticipant[]

  @@map("circle_challenges")
}

model CircleChallengeParticipant {
  id          String @id @default(cuid())
  challengeId String
  userId      String
  progress    Float @default(0)
  completed   Boolean @default(false)
  joinedAt    DateTime @default(now())

  // Relations
  challenge   CircleChallenge @relation(fields: [challengeId], references: [id], onDelete: Cascade)
  user        User            @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([challengeId, userId])
  @@map("circle_challenge_participants")
}

model NotificationSchedule {
  id         String   @id @default(cuid())
  userId     String
  type       String   // "morning_checkin" | "insight_available" | "guardrail_alert" | "social_milestone" | "calendar_conflict"
  enabled    Boolean  @default(true)
  frequency  String   @default("daily") // "daily" | "as_needed" | "weekly"
  maxPerDay Int?
  lastSentAt DateTime?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, type])
  @@map("notification_schedules")
}

model PushNotification {
  id          String   @id @default(cuid())
  userId      String
  type        String
  title       String
  message     String
  deeplink    String?
  data        Json?
  scheduledFor DateTime
  sentAt      DateTime?
  status      String   @default("pending") // "pending" | "sent" | "failed"
  createdAt   DateTime @default(now())

  @@map("push_notifications")
}

// Health data integration
model HealthData {
  id         String   @id @default(cuid())
  userId     String   @unique
  sleepHours Float    @default(0)
  steps      Int      @default(0)
  hrv        Float    @default(0)
  lastSync   DateTime @default(now())
  source     String   @default("manual") // "apple_health" | "google_fit" | "manual"
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("health_data")
}

// Financial data integration
model PlaidAccount {
  id         String   @id @default(cuid())
  userId     String
  accountId  String   @unique
  name       String
  type       String
  subtype    String
  mask       String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("plaid_accounts")
}

// Calendar integration
model CalendarEvent {
  id               String   @id @default(cuid())
  userId           String
  eventId          String   @unique
  title            String
  start            DateTime
  end              DateTime
  description      String?
  location         String?
  attendees        Json?    // Array of attendee emails
  isNonNegotiable  Boolean  @default(false)
  category         String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  // Relations
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("calendar_events")
}

// User profile for social features
model UserProfile {
  id                  String   @id @default(cuid())
  fid                 String   @unique
  displayName         String?
  username            String?
  pfpUrl              String?
  bio                 String?
  streakData          Json     @default("{}") // StreakData object
  topInsightCategory  String?  // "health" | "money" | "productivity"
  publicPatterns      Boolean  @default(false)
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  @@map("user_profiles")
}

